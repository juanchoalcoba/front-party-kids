 const tileClassName = ({ date, view }) => {
    if (view === "month") {
      if (
        bookedDates.some(
          (booking) => booking.date.toDateString() === date.toDateString()
        )
      ) {
        return "booked-date";
      }
      if (date < today) {
        return "disabled-date";
      }
    }
    return "";
  };

  const generateStartTimes = () => {
    const times = [];
    let startHour = 8; // La primera hora disponible es 8:00
    const maxStartHourFor4Hours = 20; // Última hora posible para una reserva de 4 horas (20:00)
    const maxStartHourFor8Hours = 16; // Última hora posible para una reserva de 8 horas (16:00)
  
    const selectedDateBookings = bookedDates.filter(
      (booking) => booking.date.toDateString() === date.toDateString()
    );
  
    const isTimeSlotAvailable = (hour) => {
      return !selectedDateBookings.some((booking) => {
        const bookedHour = parseInt(booking.timeSlot.split(":")[0]);
  
        // Validación para reservas de 4 horas
        if (booking.hours === "4") {
          return (
            (hour >= bookedHour && hour < bookedHour + 4) ||
            hour === bookedHour + 4 ||
            (hour >= bookedHour - 4 && hour < bookedHour) // Bloquea las 4 horas anteriores
          );
        }
        // Validación para reservas de 8 horas
        else if (booking.hours === "8") {
          return (
            (hour >= bookedHour && hour < bookedHour + 8) ||
            (hour >= bookedHour - 4 && hour < bookedHour) // Bloquea las 4 horas anteriores
          );
        }
        return false;
      });
    };
  
    // Verifica si existe alguna reserva de 4 horas en las horas críticas (16, 15, 14, 13 o 12)
    const hasCritical4HourBooking = selectedDateBookings.some(
      (booking) =>
        booking.hours === "4" &&
        [12, 13, 14, 15, 16].includes(parseInt(booking.timeSlot.split(":")[0]))
    );
  
    // Verifica si ya existe una reserva de 8 horas en el mismo día
    const has8HourBooking = selectedDateBookings.some(
      (booking) => booking.hours === "8"
    );
  
    // Lógica para generar horarios disponibles para 4 horas
    if (bookingData.hours === "4") {
      while (startHour <= maxStartHourFor4Hours) {
        if (isTimeSlotAvailable(startHour)) {
          times.push(`${startHour}:00`);
        }
        startHour++;
      }
    }
    // Lógica para generar horarios disponibles para 8 horas
    else if (bookingData.hours === "8") {
      // Deshabilita la opción de 8 horas si ya existe una reserva de 8 horas
      if (!has8HourBooking && !hasCritical4HourBooking) {
        while (startHour <= maxStartHourFor8Hours) {
          if (isTimeSlotAvailable(startHour)) {
            times.push(`${startHour}:00`);
          }
          startHour++;
        }
      }
    }
  
    return times;
  };




  //primvatepageandandoantesdetocar

  // Autenticación
  if (!authenticated) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-gray-900 p-6">
        <div className="max-w-sm w-full bg-gray-800 shadow-xl rounded-lg p-8">
          <h2 className="text-2xl font-bold text-center text-white mb-6">
            Acceso Privado
          </h2>
          <p className="text-gray-400 text-center mb-4">
            Ingrese la contraseña para acceder a las reservas
          </p>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-4 py-2 border border-gray-600 rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-400 text-white bg-gray-800"
            placeholder="Contraseña"
          />
          <button
            onClick={handleLogin}
            className="w-full py-2 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition duration-300"
          >
            Acceder
          </button>
        </div>
      </div>
    );
  }

  // Filtrar reservas pendientes y confirmadas
  const pendingBookings = bookings.filter((booking) => !booking.confirmed);
  const confirmedBookings = bookings.filter((booking) => booking.confirmed);

  return (
    <div className="bg-gray-900 min-h-screen p-6">
      <div className="max-w-6xl mx-auto bg-gray-800 shadow-xl rounded-lg p-8 border-4 border-violet-400">
        <h2 className="text-3xl font-bold text-center text-white mb-6">
          Reservas Pendientes
        </h2>
        <div className="overflow-x-auto">
          <table className="min-w-full table-auto bg-gray-800 text-white shadow-md rounded-lg text-sm">
            <thead>
              <tr className="bg-gray-700 text-gray-300 text-left">
                <th className="px-4 py-2 font-semibold">Nombre</th>
                <th className="px-4 py-2 font-semibold">
                  Nombre del Niño/Niña
                </th>
                <th className="px-4 py-2 font-semibold">Fecha</th>
                <th className="px-4 py-2 font-semibold">Teléfono</th>
                <th className="px-4 py-2 font-semibold">Duracion</th>
                <th className="px-4 py-2 font-semibold">Horario</th>
                <th className="px-4 py-2 font-semibold">Leer/Ver</th>
                <th className="px-4 py-2 font-semibold">Acciones</th>
              </tr>
            </thead>
            <tbody>
              {pendingBookings.map((booking) => (
                <tr
                  key={booking._id}
                  className="border-b border-gray-600 hover:bg-gray-700 transition duration-300 ease-in-out"
                >
                  <td className="px-4 py-2 text-gray-200">{booking.name}</td>
                  <td className="px-4 py-2 text-gray-200">{booking.namekid}</td>
                  <td className="px-4 py-2 text-gray-300">
                    {new Date(booking.date).toLocaleDateString("en-CA")}
                  </td>
                  <td className="px-4 py-2 text-gray-300">{booking.phone}</td>
                  <td className="px-4 py-2 text-gray-300">
                    {booking.hours} horas
                  </td>
                  <td className="px-4 py-2 text-gray-300">
                    {booking.timeSlot}
                  </td>
                  <td className="px-4 py-2 text-gray-300">
                    <input
                      type="checkbox"
                      checked={booking.viewedByAdmin} // El estado de la reserva (si ya ha sido vista o no)
                      onChange={() => handleViewed(booking.name)} // Llama a la función con el nombre de la reserva
                      disabled={booking.viewedByAdmin} // Deshabilita el checkbox si ya ha sido marcado
                    />
                  </td>
                  <td className="flex flex-row justify-center items-center px-4 py-2">
                    <button
                      onClick={() => handleDelete(booking.name)}
                      className="py-2 px-4 bg-red-600 text-white rounded hover:bg-red-700 transition duration-300 min-w-[120px]"
                    >
                      Eliminar
                    </button>
                    <button
                      onClick={() => handleConfirm(booking.name)}
                      className={`ml-4 py-2 px-4 ${
                        booking.confirmed ? "bg-green-500" : "bg-blue-600"
                      } text-white rounded hover:bg-green-600 transition duration-300 min-w-[120px]`}
                    >
                      {booking.confirmed ? "Confirmada" : "Confirmar"}
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Panel de Reservas Confirmadas */}
      <div className="max-w-6xl mx-auto bg-gray-800 shadow-xl rounded-lg p-8 mt-8 border-4 border-green-400">
        <h2 className="text-3xl font-bold text-center text-white mb-6">
          Reservas Confirmadas
        </h2>
        <div className="overflow-x-auto">
          <table className="min-w-full table-auto bg-gray-800 text-white shadow-md rounded-lg text-sm">
            <thead>
              <tr className="bg-gray-700 text-gray-300 text-left">
                <th className="px-4 py-2 font-semibold">Nombre</th>
                <th className="px-4 py-2 font-semibold">
                  Nombre del Niño/Niña
                </th>
                <th className="px-4 py-2 font-semibold">Fecha</th>
                <th className="px-4 py-2 font-semibold">Teléfono</th>
                <th className="px-4 py-2 font-semibold">Duración</th>
                <th className="px-4 py-2 font-semibold">Horario</th>
                <th className="px-4 py-2 font-semibold">Acción</th>{" "}
                {/* Nueva columna para el botón de eliminar */}
              </tr>
            </thead>
            <tbody>
              {confirmedBookings.map((booking) => (
                <tr
                  key={booking._id}
                  className="border-b border-gray-600 hover:bg-gray-700 transition duration-300 ease-in-out"
                >
                  <td className="px-4 py-2 text-gray-200">{booking.name}</td>
                  <td className="px-4 py-2 text-gray-200">{booking.namekid}</td>
                  <td className="px-4 py-2 text-gray-300">
                    {new Date(booking.date).toLocaleDateString("en-CA")}
                  </td>
                  <td className="px-4 py-2 text-gray-300">{booking.phone}</td>
                  <td className="px-4 py-2 text-gray-300">
                    {booking.hours} horas
                  </td>
                  <td className="px-4 py-2 text-gray-300">
                    {booking.timeSlot}
                  </td>
                  <td className="px-4 py-2 text-center">
                    <button
                      className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-300"
                      onClick={() => handleDelete(booking.name)} // Función de eliminación
                    >
                      Eliminar
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default PrivatePage;
